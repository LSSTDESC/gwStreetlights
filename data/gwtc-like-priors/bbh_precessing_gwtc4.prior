# These are the priors for precessing spin BBH systems
# Derived from the gwtc 4 paper: https://arxiv.org/pdf/2508.18083

# in progress
mass_1 = Constraint(name='mass_1', minimum=3.4, maximum=60, latex_label="$m_1$") # Primary mass takes same analytical form

# For a_i, it should be a truncated gaussian, but it is not clear what the values of the truncated gaussian are. See Gaussian Component Spins in https://arxiv.org/pdf/2508.18083
# It looks like the posterior is approximately µ~0.1, and σ~0.4
a_1 = Uniform(name='a_1', minimum=0, maximum=0.99)
a_2 = Uniform(name='a_2', minimum=0, maximum=0.99)


# Done
mass_ratio = bilby.core.prior.analytical.PowerLaw(1.2, 0.01, 1, name="mass_ratio", latex_label="$q$", unit=None, boundary=None) # This is directly from sec 6.2 of https://arxiv.org/pdf/2508.18083
mass_2 = Constraint(name='mass_2', minimum=5, maximum=200, latex_label="$m_2$")
chirp_mass = bilby.gw.prior.UniformInComponentsChirpMass(name='chirp_mass', minimum=5, maximum=250)
luminosity_distance = bilby.gw.prior.UniformSourceFrame(name='luminosity_distance', minimum=1e1, maximum=3e4) # Select this upper bound since we go out to redshift of z~3 in SkySim5000
dec = Cosine(name='dec') # Assume a cosine prior on dec
ra = Uniform(name='ra', minimum=0, maximum=2 * np.pi, boundary='periodic') # Assume uniform prior for ra
psi = Uniform(name='psi', minimum=0, maximum=np.pi, boundary='periodic')
phase = Uniform(name='phase', minimum=0, maximum=2 * np.pi, boundary='periodic') # Should be no variation between this and the aligned case
theta_jn = Sine(name='theta_jn') # Should be no variation between this and the aligned case
phi_12 = Uniform(name='phi_12', minimum=0, maximum=2 * np.pi, boundary='periodic') # Assume that the spin azimuthal angle difference is uniformly distributed
phi_jl = Uniform(name='phi_jl', minimum=0, maximum=2 * np.pi, boundary='periodic') # Assume that the angle between J and L is uniformly distributed
tilt_1 = Sine(name='tilt_1') # Assume that tilt angle prior is distributed using a sine function
tilt_2 = Sine(name='tilt_2') # Assume that tilt angle prior is distributed using a sine function